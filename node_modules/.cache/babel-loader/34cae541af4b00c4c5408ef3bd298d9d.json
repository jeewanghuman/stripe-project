{"ast":null,"code":"var _jsxFileName = \"/Users/jeewanghuman/Public/stripe-card-payment/src/CheckoutForm.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nexport default function CheckoutForm() {\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const [emailAddress, setEmail] = useState('');\n  const title = /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 17\n    }\n  }, \" Hotdog Pin Ship\");\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    window.fetch(\"/create-payment-intent\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        items: [{\n          id: \"hotdog pin\"\n        }]\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setClientSecret(data.clientSecret);\n    });\n  }, []);\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Roboto, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  const handleChange = async event => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      receipt_email: emailAddress,\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: emailAddress\n        }\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: emailAddress,\n    onChange: e => setEmail(e.target.value),\n    placeholder: \"Enter email address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CardElement, {\n    id: \"card-element\",\n    options: cardStyle,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: processing || disabled || succeeded,\n    id: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"button-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, processing ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spinner\",\n    id: \"spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }) : \"Pay $12\")), error && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-error\",\n    role: \"alert\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, error), /*#__PURE__*/React.createElement(\"p\", {\n    className: succeeded ? \"result-message\" : \"result-message hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, \"Payment succeeded, you will get your hotdog pin soon! Refresh the page to pay again.\"));\n}","map":{"version":3,"sources":["/Users/jeewanghuman/Public/stripe-card-payment/src/CheckoutForm.jsx"],"names":["React","useState","useEffect","CardElement","useStripe","useElements","CheckoutForm","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","emailAddress","setEmail","title","stripe","elements","window","fetch","method","headers","body","JSON","stringify","items","id","then","res","json","data","cardStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","handleChange","event","empty","message","handleSubmit","ev","preventDefault","payload","confirmCardPayment","receipt_email","payment_method","card","getElement","billing_details","name","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\n\nexport default function CheckoutForm() {\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const [emailAddress, setEmail] = useState('');\n  const title = <h1> Hotdog Pin Ship</h1>;\n\n  const stripe = useStripe();\n  const elements = useElements();\n\n  useEffect(() => {\n    window\n      .fetch(\"/create-payment-intent\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({items: [{ id: \"hotdog pin\" }]})\n      })\n      .then(res => {\n        return res.json();\n      })\n      .then(data => {\n        setClientSecret(data.clientSecret);\n      });\n  }, []);\n\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Roboto, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  const handleChange = async (event) => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      receipt_email: emailAddress,\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: emailAddress\n        }\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n\n\n\n\n\n\n\n\n  return (\n    \n    <form id=\"payment-form\" onSubmit={handleSubmit}>\n      \n      <input\n        type=\"text\"\n        value={emailAddress}\n        onChange={(e) => setEmail(e.target.value)}\n        placeholder=\"Enter email address\"\n      />\n      \n      <CardElement id=\"card-element\" options={cardStyle} onChange={handleChange} />\n      <button\n        disabled={processing || disabled || succeeded}\n        id=\"submit\"\n      >\n        <span id=\"button-text\">\n          {processing ? (\n            <div className=\"spinner\" id=\"spinner\"></div>\n          ) : (\n            \"Pay $12\"\n          )}\n        </span>\n      </button>\n      {/* Show any error that happens when processing the payment */}\n      {error && (\n        <div className=\"card-error\" role=\"alert\">\n          {error}\n        </div>\n      )}\n      {/* Show a success message upon completion */}\n      <p className={succeeded ? \"result-message\" : \"result-message hidden\"}>\n        Payment succeeded, you will get your hotdog pin soon!\n        Refresh the page to pay again.\n      </p>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}